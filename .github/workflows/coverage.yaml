name: Test and Coverage

on:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    name: test and coverage
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          persist-credentials: false # To use the personal token instead of the GITHUB_TOKEN
          fetch-depth: 0 # To fetch the full history, not just the latest commit

      # Step 2: Setup Go environment
      - name: Setup Go
        uses: actions/setup-go@v2
        with:
          go-version: "1.21.0"

      # Step 3: Cache Go modules to speed up the build
      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Run tests and generate coverage report
      - name: Run Tests
        run: |
          go test ./... -covermode=count -coverprofile=coverage.out
          go tool cover -func=coverage.out

      # Step 5: Generate the coverage badge
      - name: Generate Coverage Badge
        uses: tj-actions/coverage-badge-go@v2
        with:
          filename: coverage.out

      # Step 6: Verify if `README.md` has changed
      - name: Verify Changed Files
        uses: tj-actions/verify-changed-files@v17
        id: verify-changed-files
        with:
          files: README.md

      # Step 7: Commit changes if `README.md` was updated
      - name: Commit changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add README.md
          git commit -m "chore: Updated coverage badge."

      # Step 8: Push changes to the repository
      - name: Push changes
        if: steps.verify-changed-files.outputs.files_changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
